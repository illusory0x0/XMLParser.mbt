package ruifeng/XMLParser/lib

alias @illusory0x0/parserc as @parserc

// Values
fn pEntityRef() -> @parserc.Parser[Char, String]

fn pEntityRef_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pattribute() -> @parserc.Parser[Char, (String, String)]

fn pattribute_with_ctx() -> @parserc.Parser[Char, ((String, String), XMLParserContext)]

fn pattributes() -> @parserc.Parser[Char, Map[String, String]]

fn pattributes_with_ctx() -> @parserc.Parser[Char, (Map[String, String], XMLParserContext)]

fn pcdata() -> @parserc.Parser[Char, String]

fn pcdata_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pcharRef() -> @parserc.Parser[Char, String]

fn pcharRef_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pcomment() -> @parserc.Parser[Char, String]

fn pcomment_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pdtd() -> @parserc.Parser[Char, String]

fn pdtd_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pelement() -> @parserc.Parser[Char, XMLElement]

fn pelement_with_ctx() -> @parserc.Parser[Char, (XMLElement, XMLParserContext)]

fn pname() -> @parserc.Parser[Char, String]

fn pname_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn ppi() -> @parserc.Parser[Char, String]

fn ppi_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pprolog() -> @parserc.Parser[Char, Map[String, String]]

fn pprolog_with_ctx() -> @parserc.Parser[Char, (Map[String, String], XMLParserContext)]

fn preference() -> @parserc.Parser[Char, String]

fn preference_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn ptext() -> @parserc.Parser[Char, String]

fn ptext_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pwhite_space() -> @parserc.Parser[Char, String]

fn pwhite_space_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pxml() -> @parserc.Parser[Char, XMLDocument]

fn pxml_with_ctx() -> @parserc.Parser[Char, (XMLDocument, XMLParserContext)]

fn xml_from_iter(Iter[Char]) -> XMLDocument?

fn xml_from_string(String) -> XMLDocument?

fn xml_from_string_with_ctx(String) -> (XMLDocument?, XMLParserContext)

// Types and methods
type Location
impl Show for Location

pub(all) enum XMLChildren {
  Element(XMLElement)
  Reference(String)
  CDATA(String)
  PI(String)
  Comment(String)
  Text(String)
  WhiteSpace(String)
}

pub(all) struct XMLDocument {
  version : String
  encoding : String
  standalone : Bool
  dtd : String?
  root : XMLElement
}

pub(all) struct XMLElement {
  name : String
  empty_element : Bool
  attributes : Map[String, String]
  children : Array[XMLChildren]
}

type XMLErrorKind
impl Show for XMLErrorKind

type XMLParseError
impl Show for XMLParseError

type XMLParserContext
impl Show for XMLParserContext

// Type aliases

// Traits

